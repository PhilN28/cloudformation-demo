AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC and a ELB with a EC2 Target Group Associated

Resources:
    # VPC
    VPC:
        Type: AWS::EC2::VPC
        Properties: 
            CidrBlock: 10.0.0.0/16
            Tags:
                - Key: Name
                  Value: VPC-1 

    # Subnets
    PublicSubnetA:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-1a
            CidrBlock: 10.0.10.0/24
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: PublicSubnetA

    PublicSubnetB:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-1b
            CidrBlock: 10.0.30.0/24
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: PublicSubnetB

    PrivateSubnetA:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-1a
            CidrBlock: 10.0.20.0/24
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: PrivateSubnetA

    PrivateSubnetB:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-1b
            CidrBlock: 10.0.40.0/24
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: PrivateSubnetB

    # Gateway to the internet
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: InternetGateway

    # Associate the gateway to the VPC
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: InternetGateway
            VpcId:
                Ref: VPC

#Route Tables and Routes
    #Public
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: PublicRouteTable

    AssociatePublicSubnet1ToPublicRT:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetA
    
    AssociatePublicSubnet2ToPublicRT:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetB

    #Private
    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: PrivateRouteTable

    AssociatePrivateSubnet1ToPrivateRT:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnetA

    AssociatePrivateSubnet2ToPrivateRT:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnetB

    PublicRouteToInternet:
        Type: AWS::EC2::Route
        Properties: 
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PublicRouteTable

    #Bastion SG
    BastionSG:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Security Group for Bastion Host to allow SSH
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name 
                  Value: BastionSG
            VpcId: !Ref VPC
    
    # ALB Security Group allowing Port 80 from anywhere
    ALBSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Group for Application Load Balancer to expose HTTP 80
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    #EC2 SG
    ApacheEC2SG:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Security Group for EC2 to allow SSH from Bastion and expose HTTP 80
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  SourceSecurityGroupId: !Ref BastionSG
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  SourceSecurityGroupId: !Ref ALBSG

    # Linux Instance with Apache running on Port 80
    ApacheEC2:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-04a0c91ebaf968452
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.micro
        KeyName: 'cftdemo'
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          GroupSet:
          - !Ref ApacheEC2SG
          SubnetId:
            Ref: PrivateSubnetA
        Tenancy: default

    #Bastion host 
    BastionHost:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-09479453c5cde9639
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.micro
        KeyName: 'phil-win-key'
        Monitoring: 'true'
        NetworkInterfaces:
            - AssociatePublicIpAddress: 'true'
              DeviceIndex: '0'
              GroupSet:
              - !Ref BastionSG
              SubnetId:
                Ref: PublicSubnetA
        Tenancy: default

    #ELB (ALB)
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ALB
        Scheme: internet-facing # or internal
        Subnets:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
        SecurityGroups:
        - Ref: ALBSG

    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP

    # Target Group
    EC2TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Matcher:
                HttpCode: '200'
            Name: AppTargets
            Port: 80
            Protocol: HTTP
            Targets:
            - Id: !Ref ApacheEC2
              Port: 80
            VpcId: !Ref VPC
            Tags:
            - Key: Name 
              Value: ALB-TG